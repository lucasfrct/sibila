#!/usr/bin/env python3
"""
Demonstration of CrewAI Integration for Legal Analysis

This script demonstrates how the new CrewAI-based analysis system works,
replacing the traditional direct LLM approach with specialized agents.
"""

import os
import sys
import json
from typing import Dict, Any

# Add the src directory to the path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def demo_crewai_legal_analysis():
    """Demonstrate CrewAI legal analysis functionality"""
    
    print("=" * 80)
    print("DEMONSTRA√á√ÉO: AN√ÅLISE JUR√çDICA COM CREWAI")
    print("=" * 80)
    
    # Sample legal document for demonstration
    sample_legal_text = """
    Lei n¬∫ 12.345/2023
    
    Art. 1¬∫ Esta lei estabelece diretrizes para a prote√ß√£o de dados pessoais no √¢mbito 
    da administra√ß√£o p√∫blica federal, visando garantir a privacidade dos cidad√£os.
    
    Art. 2¬∫ Para os fins desta lei, considera-se:
    I - dado pessoal: informa√ß√£o relacionada a pessoa natural identificada ou identific√°vel;
    II - tratamento: toda opera√ß√£o realizada com dados pessoais;
    III - consentimento: manifesta√ß√£o livre, informada e inequ√≠voca.
    
    Art. 3¬∫ O tratamento de dados pessoais observar√° os seguintes princ√≠pios:
    I - finalidade: realiza√ß√£o do tratamento para prop√≥sitos leg√≠timos;
    II - adequa√ß√£o: compatibilidade do tratamento com as finalidades;
    III - necessidade: limita√ß√£o ao m√≠nimo necess√°rio.
    
    Art. 4¬∫ S√£o direitos dos titulares de dados:
    I - confirma√ß√£o da exist√™ncia de tratamento;
    II - acesso aos dados;
    III - corre√ß√£o de dados incompletos;
    IV - anonimiza√ß√£o, bloqueio ou elimina√ß√£o.
    
    Art. 5¬∫ O descumprimento das disposi√ß√µes desta lei sujeita o infrator √†s seguintes san√ß√µes:
    I - advert√™ncia;
    II - multa simples de at√© R$ 50.000.000,00;
    III - suspens√£o parcial do funcionamento.
    """
    
    try:
        # Import CrewAI components
        from src.modules.analysis import (
            CREWAI_ANALYSIS_AVAILABLE,
            LegalAnalysisCrewManager,
            crewai_enhanced_legal_document_analysis
        )
        
        if not CREWAI_ANALYSIS_AVAILABLE:
            print("‚ùå CrewAI analysis n√£o est√° dispon√≠vel")
            print("Verifique se o CrewAI est√° instalado e configurado corretamente")
            return
        
        print("‚úÖ CrewAI analysis dispon√≠vel")
        print("\n1. CONFIGURA√á√ÉO DOS AGENTES")
        print("-" * 40)
        
        # Note: In a real scenario, you would set OPENAI_API_KEY environment variable
        # For demonstration, we'll show the setup process
        print("‚ö†Ô∏è  ATEN√á√ÉO: Para usar o CrewAI, configure a vari√°vel OPENAI_API_KEY")
        print("   export OPENAI_API_KEY='sua-chave-da-openai'")
        
        # Check if API key is available
        openai_key = os.getenv('OPENAI_API_KEY')
        if not openai_key:
            print("üìù Demonstra√ß√£o em modo simulado (sem chave da OpenAI)")
            demo_without_api_key(sample_legal_text)
            return
        
        print("üîë Chave da OpenAI detectada - executando an√°lise real")
        demo_with_api_key(sample_legal_text, openai_key)
        
    except ImportError as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        print("Verifique se todas as depend√™ncias est√£o instaladas")
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {e}")


def demo_without_api_key(legal_text: str):
    """Demonstrate CrewAI setup without actually calling the API"""
    
    print("\n2. ESTRUTURA DOS AGENTES CREWAI")
    print("-" * 40)
    
    agent_descriptions = {
        "context_analyst": {
            "role": "Legal Context Analyst",
            "goal": "Extrair contexto jur√≠dico abrangente",
            "tools": ["LegalContextExtractionTool", "ConstitutionalRetrievalTool"]
        },
        "subject_expert": {
            "role": "Legal Subject Matter Expert", 
            "goal": "Analisar e sintetizar o assunto jur√≠dico principal",
            "tools": ["SubjectSynthesisTool", "StructuredSummaryTool"]
        },
        "structure_analyst": {
            "role": "Legal Document Structure Analyst",
            "goal": "Analisar estrutura e artigos individuais",
            "tools": ["DocumentArticleAnalysisTool"]
        },
        "legal_examiner": {
            "role": "Legal Examiner and Question Generator",
            "goal": "Gerar perguntas e conduzir exames jur√≠dicos",
            "tools": ["QuestionGenerationTool", "QuestionAnsweringTool"]
        },
        "assessment_coordinator": {
            "role": "Senior Legal Assessment Coordinator",
            "goal": "Coordenar an√°lise abrangente e fornecer avalia√ß√£o geral",
            "tools": ["LegalAssessmentTool"]
        }
    }
    
    for agent_id, agent_info in agent_descriptions.items():
        print(f"\nü§ñ {agent_info['role']}")
        print(f"   Objetivo: {agent_info['goal']}")
        print(f"   Ferramentas: {', '.join(agent_info['tools'])}")
    
    print("\n3. FERRAMENTAS DISPON√çVEIS")
    print("-" * 40)
    
    tools_descriptions = {
        "LegalContextExtractionTool": "Extrai entidades, a√ß√µes, dedu√ß√µes e pontos cr√≠ticos",
        "SubjectSynthesisTool": "Gera s√≠ntese objetiva do assunto jur√≠dico principal",
        "StructuredSummaryTool": "Cria resumos estruturados organizados por se√ß√µes",
        "DocumentArticleAnalysisTool": "Analisa artigos individuais com detalhamento",
        "QuestionGenerationTool": "Gera perguntas jur√≠dicas e question√°rios",
        "LegalAssessmentTool": "Fornece avalia√ß√£o jur√≠dica abrangente",
        "ConstitutionalRetrievalTool": "Recupera informa√ß√µes constitucionais relevantes",
        "QuestionAnsweringTool": "Responde perguntas baseadas em documentos"
    }
    
    for tool_name, description in tools_descriptions.items():
        print(f"üîß {tool_name}")
        print(f"   {description}")
    
    print("\n4. FLUXO DE AN√ÅLISE SEQUENCIAL")
    print("-" * 40)
    
    workflow_steps = [
        "1. Context Analyst ‚Üí Extrai contexto jur√≠dico estruturado",
        "2. Subject Expert ‚Üí Gera s√≠ntese e resumo estruturado", 
        "3. Structure Analyst ‚Üí Analisa artigos e estrutura do documento",
        "4. Legal Examiner ‚Üí Cria perguntas e material de exame",
        "5. Assessment Coordinator ‚Üí Integra todas as an√°lises em avalia√ß√£o final"
    ]
    
    for step in workflow_steps:
        print(f"üìã {step}")
    
    print("\n5. COMPARA√á√ÉO: ANTES vs DEPOIS")
    print("-" * 40)
    
    comparison = {
        "ANTES (LLM Direto)": [
            "‚ùå Chamadas diretas ao modelo Ollama",
            "‚ùå Fun√ß√µes isoladas sem coordena√ß√£o",
            "‚ùå Sem especializa√ß√£o por dom√≠nio",
            "‚ùå Processamento sequencial simples",
            "‚ùå Limitado a um √∫nico modelo local"
        ],
        "DEPOIS (CrewAI)": [
            "‚úÖ Agentes especializados por √°rea jur√≠dica",
            "‚úÖ Coordena√ß√£o inteligente entre agentes",
            "‚úÖ Ferramentas reutiliz√°veis e modulares",
            "‚úÖ Processamento colaborativo",
            "‚úÖ Integra√ß√£o com modelos OpenAI (GPT-3.5/4)"
        ]
    }
    
    for approach, features in comparison.items():
        print(f"\n{approach}:")
        for feature in features:
            print(f"  {feature}")
    
    print("\n6. EXEMPLO DE USO")
    print("-" * 40)
    
    usage_example = '''
# Uso tradicional (substitu√≠do)
from src.modules.analysis import enhanced_legal_document_analysis
resultado = enhanced_legal_document_analysis(texto_juridico)

# Novo uso com CrewAI
from src.modules.analysis import crewai_enhanced_legal_document_analysis
resultado = crewai_enhanced_legal_document_analysis(
    document_text=texto_juridico,
    openai_api_key="sua-chave-api"
)

# Uso direto do gerenciador de agentes
from src.modules.analysis import LegalAnalysisCrewManager
manager = LegalAnalysisCrewManager(openai_api_key="sua-chave-api")
analise = manager.analyze_legal_document(texto_juridico)
'''
    
    print(usage_example)


def demo_with_api_key(legal_text: str, api_key: str):
    """Demonstrate actual CrewAI analysis with API key"""
    
    print("\n2. EXECUTANDO AN√ÅLISE REAL COM CREWAI")
    print("-" * 40)
    
    try:
        from src.modules.analysis import LegalAnalysisCrewManager
        
        # Initialize the crew manager
        print("üöÄ Inicializando gerenciador de agentes...")
        manager = LegalAnalysisCrewManager(openai_api_key=api_key, model_name="gpt-3.5-turbo")
        
        print("‚úÖ Agentes inicializados com sucesso")
        print("üìÑ Analisando documento jur√≠dico...")
        
        # Perform the analysis
        result = manager.analyze_legal_document(legal_text)
        
        print("\n3. RESULTADOS DA AN√ÅLISE")
        print("-" * 40)
        
        if result.get("success"):
            print("‚úÖ An√°lise conclu√≠da com sucesso")
            print(f"ü§ñ Modelo usado: {result.get('model_used')}")
            print(f"üë• Agentes envolvidos: {', '.join(result.get('agents_involved', []))}")
            print(f"üîß Ferramentas utilizadas: {', '.join(result.get('tools_used', []))}")
            
            print(f"\nüìã AN√ÅLISE ABRANGENTE:")
            print("=" * 60)
            print(result.get('comprehensive_analysis', 'N√£o dispon√≠vel'))
            
            if 'structured_analysis' in result:
                print(f"\nüìä AN√ÅLISE ESTRUTURADA:")
                print("=" * 60)
                print(json.dumps(result['structured_analysis'], indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå Erro na an√°lise: {result.get('error')}")
    
    except Exception as e:
        print(f"‚ùå Erro durante execu√ß√£o: {e}")
        print("üí° Verifique se a chave da OpenAI est√° correta e tem cr√©ditos dispon√≠veis")


def demo_individual_tools():
    """Demonstrate individual tool usage"""
    
    print("\n" + "=" * 80)
    print("DEMONSTRA√á√ÉO: USO INDIVIDUAL DAS FERRAMENTAS")
    print("=" * 80)
    
    try:
        from src.modules.analysis.crewai.tools import (
            LegalContextExtractionTool,
            SubjectSynthesisTool,
            QuestionGenerationTool
        )
        
        # Sample text for tool demonstration
        sample_text = "Art. 1¬∫ Esta lei estabelece diretrizes para prote√ß√£o de dados pessoais."
        
        print("\n1. FERRAMENTA DE EXTRA√á√ÉO DE CONTEXTO")
        print("-" * 50)
        
        context_tool = LegalContextExtractionTool()
        print(f"üîß Nome: {context_tool.name}")
        print(f"üìù Descri√ß√£o: {context_tool.description[:100]}...")
        
        # Note: In a real scenario with API key, you could run:
        # result = context_tool._run(sample_text)
        # print(f"üìä Resultado: {result}")
        
        print("\n2. FERRAMENTA DE S√çNTESE DE ASSUNTO")
        print("-" * 50)
        
        synthesis_tool = SubjectSynthesisTool()
        print(f"üîß Nome: {synthesis_tool.name}")
        print(f"üìù Descri√ß√£o: {synthesis_tool.description[:100]}...")
        
        print("\n3. FERRAMENTA DE GERA√á√ÉO DE PERGUNTAS")
        print("-" * 50)
        
        question_tool = QuestionGenerationTool()
        print(f"üîß Nome: {question_tool.name}")
        print(f"üìù Descri√ß√£o: {question_tool.description[:100]}...")
        
        print("\n‚úÖ Todas as ferramentas carregadas com sucesso")
        print("üí° Para execu√ß√£o real, configure OPENAI_API_KEY e use os agentes")
        
    except ImportError as e:
        print(f"‚ùå Erro na importa√ß√£o das ferramentas: {e}")


if __name__ == "__main__":
    print("üöÄ Iniciando demonstra√ß√£o da integra√ß√£o CrewAI...")
    
    # Main demonstration
    demo_crewai_legal_analysis()
    
    # Individual tools demonstration
    demo_individual_tools()
    
    print("\n" + "=" * 80)
    print("PR√ìXIMOS PASSOS")
    print("=" * 80)
    print("1. Configure sua chave da OpenAI: export OPENAI_API_KEY='sua-chave'")
    print("2. Execute: python demo_crewai_legal_analysis.py")
    print("3. Integre no seu sistema usando as novas fun√ß√µes CrewAI")
    print("4. Customize os agentes conforme suas necessidades espec√≠ficas")
    print("\n‚ú® Transforma√ß√£o para CrewAI conclu√≠da com sucesso!")