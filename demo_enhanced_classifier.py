#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Demonstra√ß√£o do classificador aprimorado para documentos legais
"""

import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).resolve().parents[1]))

from src.modules.nlp.classifier import (
    classify_subject, classify_article_type, classify_legal_intention,
    generate_title, classify_legal_category, classify_normative_type
)


def demonstrate_classifier():
    """Demonstra as funcionalidades do classificador"""
    print("=" * 80)
    print("DEMONSTRA√á√ÉO DO CLASSIFICADOR APRIMORADO PARA DOCUMENTOS LEGAIS")
    print("=" * 80)
    print()
    
    # Exemplos de textos legais
    examples = [
        {
            'text': "Art. 5¬∫ Todos s√£o iguais perante a lei, sem distin√ß√£o de qualquer natureza, garantindo-se aos brasileiros e aos estrangeiros residentes no Pa√≠s a inviolabilidade do direito √† vida, √† liberdade, √† igualdade, √† seguran√ßa e √† propriedade",
            'description': "Artigo sobre direitos fundamentais"
        },
        {
            'text': "Art. 156. Compete aos Munic√≠pios instituir impostos sobre: I - propriedade predial e territorial urbana; II - transmiss√£o inter vivos",
            'description': "Artigo sobre compet√™ncia tribut√°ria municipal"
        },
        {
            'text': "Para os efeitos desta lei, considera-se empregador a empresa, individual ou coletiva, que, assumindo os riscos da atividade econ√¥mica, admite, assalaria e dirige a presta√ß√£o pessoal de servi√ßo",
            'description': "Defini√ß√£o de empregador"
        },
        {
            'text': "√â vedado o uso de trabalho de menores de dezesseis anos, salvo na condi√ß√£o de aprendiz, a partir de quatorze anos",
            'description': "Proibi√ß√£o de trabalho infantil"
        },
        {
            'text': "O prazo para interposi√ß√£o de recurso √© de quinze dias, contados da data da publica√ß√£o da decis√£o no Di√°rio Oficial",
            'description': "Estabelecimento de prazo"
        },
        {
            'text': "Fica autorizada a cria√ß√£o de fundos especiais destinados ao financiamento de programas de desenvolvimento urbano",
            'description': "Autoriza√ß√£o para cria√ß√£o de fundos"
        },
        {
            'text': "A viola√ß√£o do disposto neste artigo resultar√° em multa de R$ 1.000,00 a R$ 10.000,00, aplicada pelo √≥rg√£o competente",
            'description': "Estabelecimento de penalidade"
        },
        {
            'text': "Ficam revogadas as disposi√ß√µes em contr√°rio, especialmente os artigos 10 a 15 da Lei n¬∫ 8.666, de 21 de junho de 1993",
            'description': "Revoga√ß√£o de dispositivos legais"
        }
    ]
    
    print("EXEMPLOS DE CLASSIFICA√á√ÉO:\n")
    
    for i, example in enumerate(examples, 1):
        text = example['text']
        description = example['description']
        
        print(f"EXEMPLO {i}: {description}")
        print(f"Texto: {text[:100]}{'...' if len(text) > 100 else ''}")
        print("-" * 60)
        
        # Classifica√ß√µes
        subject = classify_subject(text)
        article_type = classify_article_type(text)
        legal_intention = classify_legal_intention(text)
        title = generate_title(text)
        legal_category = classify_legal_category(text)
        normative_type = classify_normative_type(text)
        
        print(f"üìÅ Assunto/Categoria: {subject}")
        print(f"üìÑ Tipo de Artigo: {article_type}")
        print(f"üéØ Inten√ß√£o Legal: {legal_intention}")
        print(f"üìù T√≠tulo Gerado: {title}")
        print(f"‚öñÔ∏è  Categoria Legal: {legal_category}")
        print(f"üìã Tipo Normativo: {normative_type}")
        print()
        print("=" * 80)
        print()


def test_classification_coverage():
    """Testa a cobertura das classifica√ß√µes"""
    print("TESTE DE COBERTURA DAS CLASSIFICA√á√ïES")
    print("=" * 60)
    
    # Teste de diferentes assuntos
    subject_tests = [
        ("Art. 1¬∫ √â livre a manifesta√ß√£o do pensamento", "Direitos Fundamentais"),
        ("Art. 2¬∫ O processo ser√° iniciado por peti√ß√£o inicial", "Processo Judicial"),
        ("Art. 3¬∫ A administra√ß√£o p√∫blica obedecer√° aos princ√≠pios", "Administra√ß√£o P√∫blica"),
        ("Art. 4¬∫ O contrato √© perfeito e acabado", "Contratos e Obriga√ß√µes"),
        ("Art. 5¬∫ O imposto sobre a renda ser√° cobrado", "Tributa√ß√£o")
    ]
    
    print("TESTE DE CLASSIFICA√á√ÉO DE ASSUNTOS:")
    for text, expected in subject_tests:
        result = classify_subject(text)
        status = "‚úÖ" if result == expected else "‚ö†Ô∏è"
        print(f"{status} '{text[:50]}...' -> {result} (esperado: {expected})")
    
    print("\nTESTE DE TIPOS DE ARTIGO:")
    article_tests = [
        ("Para os efeitos desta lei, considera-se", "Defini√ß√£o"),
        ("√â vedado o uso de", "Proibi√ß√£o"),
        ("O respons√°vel dever√°", "Obriga√ß√£o"),
        ("√â assegurado o direito de", "Direito"),
        ("A viola√ß√£o resultar√° em multa", "Penalidade")
    ]
    
    for text, expected in article_tests:
        result = classify_article_type(text)
        status = "‚úÖ" if result == expected else "‚ö†Ô∏è"
        print(f"{status} '{text}' -> {result} (esperado: {expected})")
    
    print("\nTESTE DE INTEN√á√ïES LEGAIS:")
    intention_tests = [
        ("Esta lei regulamenta o processo", "Regulamentar"),
        ("√â proibido o transporte", "Proibir"),
        ("Fica autorizada a cria√ß√£o", "Autorizar"),
        ("O prazo para cumprimento √©", "Estabelecer Prazo"),
        ("Fica revogada a Lei n¬∫", "Revogar")
    ]
    
    for text, expected in intention_tests:
        result = classify_legal_intention(text)
        status = "‚úÖ" if result == expected else "‚ö†Ô∏è"
        print(f"{status} '{text}' -> {result} (esperado: {expected})")


def test_title_generation():
    """Testa a gera√ß√£o de t√≠tulos"""
    print("\n" + "=" * 60)
    print("TESTE DE GERA√á√ÉO DE T√çTULOS")
    print("=" * 60)
    
    title_tests = [
        "Art. 1¬∫ Esta lei estabelece os direitos fundamentais dos cidad√£os",
        "Art. 5¬∫ Disp√µe sobre a prote√ß√£o do meio ambiente e recursos naturais",
        "Art. 10 Regulamenta os procedimentos de licita√ß√£o p√∫blica",
        "Art. 15 Define as compet√™ncias dos √≥rg√£os de controle interno",
        "Art. 20 Estabelece penalidades para infra√ß√µes administrativas"
    ]
    
    for text in title_tests:
        title = generate_title(text)
        print(f"üìù '{text[:50]}...' -> '{title}'")


def main():
    """Fun√ß√£o principal"""
    print("Inicializando demonstra√ß√£o do classificador...\n")
    
    try:
        demonstrate_classifier()
        test_classification_coverage()
        test_title_generation()
        
        print("\n" + "=" * 80)
        print("‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("üéØ O classificador aprimorado est√° funcionando corretamente")
        print("üìä Suporte a m√∫ltiplos tipos de classifica√ß√£o implementado")
        print("‚öñÔ∏è  Especializa√ß√£o para documentos legais ativa")
        print("=" * 80)
        
    except Exception as e:
        print(f"‚ùå Erro durante a demonstra√ß√£o: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()