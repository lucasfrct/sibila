# Example Usage: CrewAI NLP Integration
# Shows how to use the new CrewAI-powered NLP capabilities

import sys
import os
import json

# Add project path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def example_sentiment_analysis():
    """Example of sentiment analysis using CrewAI tools"""
    print("üîç Exemplo: An√°lise de Sentimentos com CrewAI")
    print("-" * 50)
    
    from src.modules.nlp.crewai_integration import enhanced_sentiment_analysis_tool
    
    legal_texts = [
        "Art. 5¬∫ √â livre a manifesta√ß√£o do pensamento, sendo vedado o anonimato.",
        "A viola√ß√£o desta norma resultar√° em multa severa e processo criminal.",
        "Fica autorizada a cria√ß√£o de programa de incentivo √† inova√ß√£o.",
        "√â proibido terminantemente o descarte de res√≠duos t√≥xicos."
    ]
    
    for i, text in enumerate(legal_texts, 1):
        print(f"\nüìÑ Texto {i}: {text}")
        result = enhanced_sentiment_analysis_tool._run(text)
        data = json.loads(result)
        
        sentiment = data['basic_sentiment']['classification']
        polarity = data['basic_sentiment']['polarity']
        emotion = data['emotions']['dominant_emotion']
        
        print(f"   Sentimento: {sentiment} (polaridade: {polarity:.3f})")
        print(f"   Emo√ß√£o dominante: {emotion}")


def example_legal_classification():
    """Example of legal document classification"""
    print("\n‚öñÔ∏è Exemplo: Classifica√ß√£o de Documentos Legais")
    print("-" * 50)
    
    from src.modules.nlp.crewai_integration import legal_document_classification_tool
    
    documents = [
        {
            "text": "LEI N¬∫ 12.965, DE 23 DE ABRIL DE 2014. Estabelece princ√≠pios para uso da Internet.",
            "type": "subject",
            "description": "Marco Civil da Internet"
        },
        {
            "text": "Para os efeitos desta lei, considera-se internet o sistema de protocolos l√≥gicos.",
            "type": "article_type",
            "description": "Artigo de defini√ß√£o"
        }
    ]
    
    for doc in documents:
        print(f"\nüìã {doc['description']}")
        print(f"   Texto: {doc['text'][:80]}...")
        
        result = legal_document_classification_tool._run(doc['text'], doc['type'])
        data = json.loads(result)
        
        if data.get('result'):
            print(f"   Classifica√ß√£o: {data['result']}")
        else:
            print(f"   Status: Modelo em treinamento")


def example_comprehensive_analysis():
    """Example of comprehensive legal analysis"""
    print("\nüìä Exemplo: An√°lise Legal Abrangente")
    print("-" * 50)
    
    from src.modules.nlp.crewai_integration import comprehensive_legal_analysis_tool
    
    comprehensive_text = """
    Art. 1¬∫ Esta Lei estabelece princ√≠pios, garantias, direitos e deveres para o uso da internet 
    no Brasil e determina as diretrizes para atua√ß√£o da Uni√£o, dos Estados, do Distrito Federal 
    e dos Munic√≠pios em rela√ß√£o √† mat√©ria.
    
    Art. 2¬∫ A disciplina do uso da internet no Brasil tem como fundamento o respeito √† 
    liberdade de express√£o, bem como:
    I - o reconhecimento da escala mundial da rede;
    II - os direitos humanos, o desenvolvimento da personalidade e o exerc√≠cio da cidadania em meios digitais.
    """
    
    print("üìÑ Analisando documento legal completo...")
    result = comprehensive_legal_analysis_tool._run(comprehensive_text)
    data = json.loads(result)
    
    classifications = data.get('classifications', {})
    print("\nüè∑Ô∏è Classifica√ß√µes identificadas:")
    
    for key, value in classifications.items():
        if value:
            label = key.replace('_', ' ').title()
            print(f"   ‚Ä¢ {label}: {value}")


def example_text_preprocessing():
    """Example of text preprocessing"""
    print("\nüîß Exemplo: Pr√©-processamento de Texto")
    print("-" * 50)
    
    from src.modules.nlp.crewai_integration import text_preprocessing_tool
    
    messy_text = """
    Art.  1¬∫    √â    LIVRE   a   manifesta√ß√£o    do  pensamento,    sendo   vedado   o   anonimato!!!
    
    ¬ß  1¬∫   -   Ningu√©m   ser√°    obrigado...   
    """
    
    operations = ["clean", "normalize", "clean,normalize", "clean,normalize,lowercase"]
    
    print(f"üìù Texto original: '{messy_text.strip()}'")
    
    for operation in operations:
        result = text_preprocessing_tool._run(messy_text, operation)
        data = json.loads(result)
        processed = data['processed_text']
        print(f"\nüîß {operation}: '{processed}'")


def example_pipeline_overview():
    """Example showing available pipelines"""
    print("\nüîÑ Exemplo: Pipelines Dispon√≠veis")
    print("-" * 50)
    
    from src.modules.nlp import get_available_pipelines
    
    pipelines = get_available_pipelines()
    
    for pipeline_id, info in pipelines.items():
        print(f"\nüìã {pipeline_id}")
        print(f"   Descri√ß√£o: {info['description']}")
        print(f"   Caso de uso: {info['use_case']}")
        
        config = info['config']
        print(f"   Detalhes:")
        print(f"     ‚Ä¢ Tarefas: {len(config['tasks'])}")
        print(f"     ‚Ä¢ Dura√ß√£o estimada: {config['estimated_duration']}s")
        print(f"     ‚Ä¢ Complexidade: {config['complexity']}")


def main():
    """Run all examples"""
    print("üöÄ EXEMPLOS DE USO: CrewAI NLP Integration")
    print("=" * 70)
    
    try:
        # Suppress warnings for cleaner output
        import warnings
        warnings.filterwarnings("ignore")
        
        example_sentiment_analysis()
        example_legal_classification()
        example_comprehensive_analysis()
        example_text_preprocessing()
        example_pipeline_overview()
        
        print("\n" + "=" * 70)
        print("‚úÖ TODOS OS EXEMPLOS EXECUTADOS COM SUCESSO!")
        print("\nüí° Pr√≥ximos passos:")
        print("  1. Configure OpenAI API key para usar agentes LLM")
        print("  2. Execute workflows completos com CrewAI")
        print("  3. Personalize agentes para seu dom√≠nio espec√≠fico")
        print("  4. Integre com seus sistemas de produ√ß√£o")
        
    except Exception as e:
        print(f"\n‚ùå Erro na execu√ß√£o dos exemplos: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()